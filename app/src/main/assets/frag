#version 300 es
precision mediump float;
out vec4 FragColor;

uniform sampler2D depthTexture;
uniform sampler2D diffuseTexture;

in vec3 Normal;
in vec3 FragPos;
in vec2 TexCoords;

uniform vec3 lightPos;
uniform vec3 lightColor;
uniform vec3 viewPos;
uniform vec3 defaultColor;

uniform int specP;
uniform float ambientStrength;
uniform float diffuseStrength;
uniform float specularStrength;

in vec4 light_space_pos;

uniform bool hasMaterial;


float ShadowCalculation(vec4 light_space_pos)
{
    vec3 proj_coords = light_space_pos.xyz / light_space_pos.w;
    proj_coords = proj_coords * 0.5 + 0.5;

    float closest_depth = texture(depthTexture, proj_coords.xy).r;
    float current_depth = proj_coords.z;

    if(current_depth > closest_depth) return 1.0;
    else return 0.0;
}


void main()
{
    vec3 color = hasMaterial ? texture(diffuseTexture, TexCoords).rgb : defaultColor;
    float shadow = ShadowCalculation(light_space_pos);

	// ambient
    vec3 ambient = ambientStrength * lightColor * color;
  	
    // diffuse
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(lightPos - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diffuseStrength * diff * lightColor * color;
  
    // highlight
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 bivector = normalize(lightDir+viewDir);
    float high = pow(max(0.0 ,dot(bivector, norm)), float(specP));
    vec3 highlight = specularStrength * high * lightColor;

    ivec2 iv = textureSize(depthTexture, 0);

    FragColor = vec4(ambient +  (diffuse + highlight), 1.0);
}
//