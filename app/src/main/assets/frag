#version 300 es
precision mediump float;
out vec4 FragColor;

struct Material {
    sampler2D texture_diffuse;
    sampler2D texture_specular;
}; 

in vec3 Normal;
in vec3 FragPos;
in vec2 TexCoords;

uniform vec3 lightPos;
uniform vec3 lightColor;
uniform vec3 viewPos;
uniform vec3 defaultColor;

uniform int specP;
uniform float ambientStrength;
uniform float diffuseStrength;
uniform float specularStrength;

uniform bool hasMaterial;
uniform Material material;


void main()
{
    vec3 color = hasMaterial ? texture(material.texture_diffuse, TexCoords).rgb : defaultColor;

	// ambient
    vec3 ambient = ambientStrength * lightColor;
  	
    // diffuse
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(lightPos - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diffuseStrength * diff * lightColor;
  
   // highlight
   vec3 viewDir = normalize(viewPos - FragPos);
   vec3 bivector = normalize(lightDir+viewDir);
   float high = pow(max(0.0 ,dot(bivector, norm)), float(specP));
   vec3 highlight = specularStrength * high * lightColor;

   FragColor = vec4((ambient +  diffuse) * color +  highlight, 1.0);
}
//